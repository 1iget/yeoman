#!/usr/bin/env node
'use strict';

var fs = require('fs');
var path = require('path');
var nopt = require('nopt');
var colors = require('colors');
var _ = require('lodash');
var pkg = require('../package.json');
var findup = require('findup-sync');
var updateNotifier = require('update-notifier');
var Insight = require('insight');

var helpScreen = _.template(fs.readFileSync(path.join(__dirname, 'help.txt'), 'utf8'));
var args = process.argv.slice(2);
var flags = nopt({}, {}, process.argv, 2);
var cmd = args[0];

var insight = new Insight({
  trackingCode: 'UA-31537568-1',
  packageName: pkg.name,
  packageVersion: pkg.version
});

/*jshint multistr:true */
var insightMsg = '\
=========================================================================='.grey + '\n\
We\'re constantly looking for ways to make '.yellow + pkg.name.bold.red + ' better! \n\
May we anonymously report usage statistics to improve the tool over time? \n\
More info: yeoman.io/insight.html & http://yeoman.io'.yellow + '\n\
=========================================================================='.grey;

// selective tracking since we don't want to track all the bad grammar
function track() {
  if (!process.env.yeoman_test && flags.insight !== false) {
    // only track the two first subcommands
    // TODO: Enable this before release
    // insight.track.apply(insight, args.slice(0, 2));
  }
}

function runInit() {
 // TODO: Init the specified generator
  track();
}

function runGrunt() {
  var gruntfile = findup('Gruntfile.{js,coffee}', {nocase: true});
  var dir = path.resolve(gruntfile, '../node_modules/grunt');
  track();
  require(dir).cli();
}

function runBower() {
  track();
  require('bower').commands[cmd].line(process.argv)
    .on('data', function (data) {
      if (data) {
        console.log(data);
      }
    })
    .on('end', function (data) {
      if (data) {
        console.log(data);
      }
      // run Bower grunt task
      process.argv = ['', '', 'bower'];
      runGrunt();
    })
    .on('error', function (err) {
      console.error(err.message);
    });
}

// TODO: Update docs to flag `--no-insight`
if (!process.env.yeoman_test && flags.insight !== false && insight.optOut === undefined) {
    insight.optOut = false;
    insight.track('downloaded');
    insight.askPermission(insightMsg);
    return;
}

// TODO: Update docs to flag `--no-update-notifier`
if (!process.env.yeoman_test && flags['update-notifier'] !== false) {
  var notifier = updateNotifier({
    packagePath: '../package',
    // TODO: remove before release:
    packageName: 'yeoman',
    packageVersion: '0.9.3'
  });

  if (notifier.update) {
    notifier.notify(true);
  }
}

if (flags.version) {
  return console.log(pkg.version);
}

if (cmd === '--help') {
  return console.log(helpScreen());
}

switch (cmd) {
  case 'help':
    track();
    console.log(helpScreen());
    break;
  case 'init':
  case 'i':
    runInit();
    break;
  case 'build':
  case 'b':
    process.argv[2] = 'build';
    runGrunt();
    break;
  case 'server':
  case 's':
    process.argv[2] = 'server';
    runGrunt();
    break;
  case 'test':
  case 't':
    process.argv[2] = 'test';
    process.env.yeoman_test = true;
    runGrunt();
    break;
  case 'watch':
    console.log(('\nFYI: Yeoman`s watch task is integrated within ' +
      'yeoman server'.bold + ' to combine the dev server, re-compilation and ' +
      'live reloading of changed assets.\n\nContinuing anyway...\n').yellow);
    runGrunt();
    break;
  case 'install':
  case 'uninstall':
  case 'update':
  case 'list':
  case 'ls':
  case 'search':
  case 'lookup':
    runBower();
    break;
  default:
    console.log(helpScreen());
    break;
}
