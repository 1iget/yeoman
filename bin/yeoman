#!/usr/bin/env node
'use strict';

var fs = require('fs');
var path = require('path');
var execFile = require('child_process').execFile;
var nopt = require('nopt');
var colors = require('colors');
var _ = require('lodash');
var pkg = require('../package.json');
var updateNotifier = require('update-notifier');
var Insight = require('insight');

var helpScreen = _.template(fs.readFileSync(path.join(__dirname, 'help.txt'), 'utf8'));
var opts = nopt({
  help: Boolean
}, {
  h: '--help'
});
var args = opts.argv.remain;
var cmd = args[0];

var insight = new Insight({
  trackingCode: 'UA-31537568-1',
  packageName: pkg.name,
  packageVersion: pkg.version
});

/*jshint multistr:true */
var insightMsg = '\
=========================================================================='.grey + '\n\
We\'re constantly looking for ways to make '.yellow + pkg.name.bold.red + ' better! \n\
May we anonymously report usage statistics to improve the tool over time? \n\
More info: yeoman.io/insight.html & http://yeoman.io'.yellow + '\n\
=========================================================================='.grey;

// selective tracking since we don't want to track all the bad grammar
function track() {
  if (!process.env.yeoman_test && opts.insight !== false) {
    // only track the two first subcommands
    // TODO: Enable this before release
    //insight.track.apply(insight, args.slice(0, 2));
  }
}

function runInit() {
  var env = require('yeoman-generator')();

  track();

  // register each built-in generator individually
  env.plugins('node_modules', __dirname);

  // alias any single namespace to `*:all` and `webapp` namespace specifically
  // to webapp:app.
  env.alias(/^([^:]+)$/, '$1:all');
  env.alias(/^([^:]+)$/, '$1:app');

  // lookup for every namespaces, within the environments.paths and lookups
  env.lookup('*:*');

  if (opts.help) {
    return console.log(env.help('yeoman init'));
  }

  // default to generator-webapp
  if (!opts.help && opts.argv.remain.length === 1) {
    args[1] = 'webapp';
  }

  env.on('end', function() {
    console.log('done running sir');
  });

  env.on('error', function(err) {
    console.error('Error executing yeoman-init', process.argv.slice(2).join(' '));
    console.error();
    console.error(opts.debug ? err.stack : err.message);
    process.exit(err.code || 1);
  });

  // Note: at some point, nopt needs to know about the generator options, the
  // one that will be triggered by the below args. Maybe the nopt parsing
  // should be done internally, from the args.
  env.run(args.slice(1), opts);
}

function runGrunt() {
  // search for installed grunt by using node's built-in require() logic
  var args = ['-p', '-e', 'require.resolve("grunt")'];
  execFile(process.execPath, args, function(err, stdout, stderr) {
    var gruntPath = stdout.trim();

    if (err) {
      console.error(stderr);
      console.error('Unable to find local grunt'.red);
      process.exit(99);
    }

    require(gruntPath).cli();
  });

  track();
}

function runBower() {
  track();
  require('bower').commands[cmd].line(process.argv)
    .on('data', function (data) {
      if (data) {
        console.log(data);
      }
    })
    .on('end', function (data) {
      if (data) {
        console.log(data);
      }
      // run Bower grunt task
      process.argv = ['', '', 'bower'];
      runGrunt();
    })
    .on('error', function (err) {
      console.error(err.message);
    });
}

// TODO: Update docs to flag `--no-insight`
if (!process.env.yeoman_test && opts.insight !== false && insight.optOut === undefined) {
    insight.optOut = false;
    insight.track('downloaded');
    insight.askPermission(insightMsg);
    return;
}

// TODO: Update docs to flag `--no-update-notifier`
if (!process.env.yeoman_test && opts['update-notifier'] !== false) {
  var notifier = updateNotifier({
    packagePath: '../package',
    // TODO: remove before release:
    packageName: 'yeoman',
    packageVersion: '0.9.3'
  });

  if (notifier.update) {
    notifier.notify(true);
  }
}

if (opts.version) {
  return console.log(pkg.version);
}

switch (cmd) {
  case undefined:
    track();
    console.log(helpScreen());
    break;
  case 'help':
  case '--help':
    process.argv[2] = 'help';
    track();
    console.log(helpScreen());
    break;
  case 'init':
  case 'i':
    runInit();
    break;
  case 'build':
  case 'b':
    process.argv[2] = 'build';
    runGrunt();
    break;
  case 'server':
  case 's':
    process.argv[2] = 'server';
    runGrunt();
    break;
  case 'test':
  case 't':
    process.argv[2] = 'test';
    process.env.yeoman_test = true;
    runGrunt();
    break;
  case 'watch':
    console.log(('\nFYI: Yeoman`s watch task is integrated within ' +
      'yeoman server'.bold + ' to combine the dev server, re-compilation and ' +
      'live reloading of changed assets.\n\nContinuing anyway...\n').yellow);
    runGrunt();
    break;
  case 'install':
  case 'uninstall':
  case 'update':
  case 'list':
  case 'ls':
  case 'search':
  case 'lookup':
    runBower();
    break;
  default:
    console.log(helpScreen());
    break;
}
